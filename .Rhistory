train[,'passenger_count'] = factor(train[,'passenger_count'], labels=(1:6))
test[,'passenger_count'] = factor(test[,'passenger_count'], labels=(1:6))
#Correlation analysis for continous variables
numeric_index = sapply(train,is.numeric)
numeric_data = train[,numeric_index]
cnames = colnames(numeric_data)
corrgram(train[,numeric_index],upper.panel=panel.pie, main = "Correlation Plot")
#ANOVA for categorical variables
aov_results = aov(fare_amount ~ passenger_count + pickup_hour + pickup_weekday + pickup_mnth + pickup_yr,data = train)
summary(aov_results)
#pickup_weekday has p value greater than 0.05 therefore we remove from train and test dataset
train = subset(train,select=-pickup_weekday)
test = subset(test,select=-pickup_weekday)
#Normality check
qqnorm(train$fare_amount)
histogram(train$fare_amount)   #right skewed
qqnorm(train$dist)
histogram(train$dist)      #right skewed
#Normalisation
print('dist')
train[,'dist'] = (train[,'dist'] - min(train[,'dist']))/
(max(train[,'dist'] - min(train[,'dist'])))
set.seed(1000)
train.index = createDataPartition(train$fare_amount,p=0.75,list = FALSE)
train_data = train[train.index,]
test_data = train[-train.index,]
rmExcept(c("test","train","df",'df1','df2','test_data','train_data'))
#check multicollearity
library(usdm)
install.packages("usdm")
vif(train[,-1])
warnings()
#check for normal distribution of data
qqnorm(train_data$fare_amount)
histogram(train_data$fare_amount)    #right skewed
#check for linear relationship between dependent variable vs independent variable by scatter plot
#passenger_count
ggplot(train_data, aes_string(x = train_data$fare_amount, y = train_data$dist))+ geom_point(aes_string(colour = train_data$passenger_count), size = 4) +theme_bw() + ylab("dist") + xlab("fare_amount") + ggtitle("scatter plot analysis for passenger_count") + scale_color_discrete(name = "passenger_count")
#pickup_yr
ggplot(train_data, aes_string(x = train_data$fare_amount, y = train_data$dist))+ geom_point(aes_string(colour = train_data$pickup_yr), size = 4) +theme_bw() + ylab("dist") + xlab("fare_amount") + ggtitle("scatter plot analysis for pickup_yr") + scale_color_discrete(name = "pickup_yr")
#pickup_mnth
ggplot(train_data, aes_string(x = train_data$fare_amount, y = train_data$dist))+ geom_point(aes_string(colour = train_data$pickup_mnth), size = 4) +theme_bw() + ylab("dist") + xlab("fare_amount") + ggtitle("scatter plot analysis for pickup_mnth") + scale_color_discrete(name = "pickup_mnth")
#pickup_hour
ggplot(train_data, aes_string(x = train_data$fare_amount, y = train_data$dist))+ geom_point(aes_string(colour = train_data$pickup_hour), size = 4) +theme_bw() + ylab("dist") + xlab("fare_amount") + ggtitle("scatter plot analysis for pickup_hour") + scale_color_discrete(name = "pickup_hour")
#apply model on train_data
lm_model = lm(fare_amount ~.,data=train_data)
summary(lm_model)
#Predict on test_data
lm_predictions = predict(lm_model,test_data[,2:6])
summary(lm_predictions)
#error matrix
regr.eval(test_data[,1],lm_predictions)
#apply model on train_data
Dt_model = rpart(fare_amount ~ ., data = train_data, method = "anova")
summary(Dt_model)
#Predict for new test cases
Dt_predictions = predict(Dt_model, test_data[,2:6])
#error matrix
regr.eval(test_data[,1], Dt_predictions)
#apply model on train_data
rf_model = randomForest(fare_amount ~.,data=train_data)
summary(rf_model)
#Predict for new test cases
rf_predictions = predict(rf_model,test_data[,2:6])
#error matrix
regr.eval(test_data[,1],rf_predictions)
# Clean the environment -------------------------------------------------
rm(list=ls())
# Set working directory ---------------------------------------------------
setwd("E:/Project/CabFarePrediction")
getwd()
# Load required Libraries for analysis  ----------------------------------
x = c("ggplot2", "corrgram", "DMwR", "caret", "randomForest", "unbalanced","C50",
"dummies", "e1071", "Information", "MASS", "rpart", "gbm", "ROSE",
'sampling', 'DataCombine', 'inTrees',"scales","psych","gplots")
#install.packages(x)
lapply(x, require, character.only = TRUE)
rm(x)
# Load the data -----------------------------------------------------------
Train_Cab <- read.csv("train_cab.csv")
# Explore the data  -------------------------------------------------------
# Check class of the data
class(Train_Cab)
#Check the dimensions(no of rows and no of columns)
dim(Train_Cab)
#Check names of dataset(no need of renaming variables)
names(Train_Cab)
#Check top(first) rows of dataset
head(Train_Cab,8)
#Check bottom(last) rows of dataset
tail(Train_Cab)
#Check structure of dataset(data structure of each variable)
str(Train_Cab)
#Check summary of dataset
summary(Train_Cab)
# Variable Identification
# Target variable - fare_amount
str(Train_Cab$fare_amount) # fare_amount is a continous variabe
# Data type conversion
# As observed, we have to change fare_amount from factor to numeric
Train_Cab$fare_amount = as.numeric(as.character(Train_Cab$fare_amount))
warning()
summary((Train_Cab$fare_amount))
# Total number of missing values present in whole datset
sum(is.na(Train_Cab))
# Missing values present in each column in the dataset
apply(Train_Cab,2,function(x){sum(is.na(x))})
# Store these missing values present in each variable in to data frame
missing_val = data.frame(apply(Train_Cab,2,function(x){sum(is.na(x))}))
# Creating new variable Column with values as rownames
missing_val$Columns = row.names(missing_val)
View(missing_val)
# Rename column 1 in missing_val dataframe
names(missing_val)[1] =  "Missing_percentage"
# Lets calculate  percentage of missing values
missing_val$Missing_percentage = (missing_val$Missing_percentage/nrow(Train_Cab))*100
# sort the missing percentage in descending order
missing_val = missing_val[order(-missing_val$Missing_percentage),]
# Delete rownames
row.names(missing_val) <- NULL
# Re order the columns for clear understanding
missing_val <- missing_val[,c(2,1)]
Train_Cab = na.omit(Train_Cab)
sum(is.na(Train_Cab))
Train_Cab$pickup_datetime <- gsub('// UTC','',Train_Cab$pickup_datetime)
Train_Cab$date <- as.Date(Train_Cab$pickup_datetime)
# Lets split this new variable Date into year,month,weekday
# Extract the year
Train_Cab$year <- substr(as.character(Train_Cab$date),1,4)
# Extract the month
Train_Cab$month <-substr(as.character(Train_Cab$date),6,7)
# Extract the weekday
Train_Cab$day <- weekdays(as.POSIXct(Train_Cab$date),abbreviate = F)
# Extract the date
Train_Cab$date <- substr(as.character(Train_Cab$date),9,10)
# Extract the time / hour
Train_Cab$hour <- substr(as.factor(Train_Cab$pickup_datetime),12,13)
#Lets delete picupdate time as we converted this variable into day,month,year,hour
Train_Cab$pickup_datetime <- NULL
dim(Train_Cab)
head(Train_Cab)
# Lets check summary again after new feature creation
summary(Train_Cab)
# Lets check for NA after new feature creation
sum(is.na(Train_Cab))
apply(Train_Cab,2,function(x){sum(is.na(x))})
Train_Cab = na.omit(Train_Cab)
dim(Train_Cab)
# Outlier analysis --------------------------------------------------------
# Boxplots-Distribution and outlier check
numeric_index <- sapply(Train_Cab,is.numeric)# Selecting only numeric
numeric_index
numeric_data <-Train_Cab[,numeric_index]
cnames <- colnames(numeric_data)
cnames
# Boxplot for all continous varaibles
for (i in 1:length(cnames))
{
assign(paste0("gn",i), ggplot(aes_string(y = cnames[i]), data = Train_Cab)+
stat_boxplot(geom = "errorbar", width = 0.5) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +
theme(legend.position="bottom")+
labs(y=cnames[i])+
ggtitle(paste("Box plot for",cnames[i])))
}
View(gn1)
gridExtra::grid.arrange(gn1,gn2,gn3,gn4,gn5,gn6,ncol=2)
######  fare_amount ######
# Let use summary function to check min max values and identify outliers
summary(Train_Cab$fare_amount)
Q1 <- quantile(Train_Cab$fare_amount,0.25)#6
Q1 <- quantile(Train_Cab$fare_amount,0.25)#6
Q3 <- quantile(Train_Cab$fare_amount,0.75)#12.5
UL <- Q3 + (1.5*IQR(Train_Cab$fare_amount)) # 22.25
LL <- Q1 -(1.5*IQR(Train_Cab$fare_amount)) #-3.75
Train_Cab[Train_Cab$fare_amount<LL,"fare_amount"] <- LL
Train_Cab[Train_Cab$fare_amount>UL,"fare_amount"] <- UL
#Lets sort the data to find out any other anamolies like -ve and 0's
fare_asc <-Train_Cab[order(Train_Cab$fare_amount),]
fare_desc <- Train_Cab[order(-Train_Cab$fare_amount),]
# We have some negative values and zeros lets treat them as NA and delete
Train_Cab$fare_amount[Train_Cab$fare_amount <= 0] <- NA
Train_Cab$fare_amount[Train_Cab$fare_amount == 0.01] <- NA
sum(is.na(Train_Cab))
Train_Cab <- na.omit(Train_Cab)
------------------------------------------------------------------------------------
# pickup_longitude
------------------------------------------------------------------------------------
#Originally, Latitudes range from -90 to 90.
#Originally, Longitudes range from -180 to 180.
summary(Train_Cab$pickup_longitude)
Q1 <- quantile(Train_Cab$pickup_longitude,0.25)#-73.99126
Q3 <- quantile(Train_Cab$pickup_longitude,0.75)#-73.96684
UL <- Q3 + (1.5*IQR(Train_Cab$pickup_longitude))# -73.92884
LL <- Q1-(1.5*IQR(Train_Cab$pickup_longitude)) # -74.03013
Train_Cab[Train_Cab$pickup_longitude < LL ,"pickup_longitude"] <- LL
Train_Cab[Train_Cab$pickup_longitude > UL ,"pickup_longitude"] <- UL
---------------------------------------------------------------------------------------
# pickup_latitude
---------------------------------------------------------------------------------------
summary(Train_Cab$pickup_latitude)
Q1 <- quantile(Train_Cab$pickup_latitude,0.25)#40.73494
Q3 <- quantile(Train_Cab$pickup_latitude,0.75)#40.76735
UL <- Q3 + (1.5*IQR(Train_Cab$pickup_latitude))#40.81598
LL <- Q1 - (1.5*IQR(Train_Cab$pickup_latitude))#40.81598
Train_Cab[Train_Cab$pickup_latitude < LL,"pickup_latitude"] <- LL
Train_Cab[Train_Cab$pickup_latitude > UL,"pickup_latitude"] <- UL
#### Dropoff longitude #####
summary(Train_Cab$dropoff_longitude)
Q1 <- quantile(Train_Cab$dropoff_longitude,0.25)#-73.99118
Q3 <- quantile(Train_Cab$dropoff_longitude,0.75)#-73.96365
UL <- Q3 + (1.5*IQR(Train_Cab$dropoff_longitude))#-73.92234
LL <- Q1 - (1.5*IQR(Train_Cab$dropoff_longitude))#-74.03249
Train_Cab[Train_Cab$dropoff_longitude < LL,"dropoff_longitude"] <- LL
Train_Cab[Train_Cab$dropoff_longitude > UL,"dropoff_longitude"] <- UL
-----------------------------------------------------------------------------------------
# dropoff_lattitude
-----------------------------------------------------------------------------------------
summary(Train_Cab$dropoff_latitude)
Q1 <- quantile(Train_Cab$dropoff_latitude,0.25)#40.73466
Q3 <- quantile(Train_Cab$dropoff_latitude,0.75)#40.76801
UL <- Q3 + (1.5*IQR(Train_Cab$dropoff_latitude))#40.81599
LL <- Q1 - (1.5*IQR(Train_Cab$dropoff_latitude))#40.68
Train_Cab[Train_Cab$dropoff_latitude < LL,"dropoff_latitude"] <- LL
Train_Cab[Train_Cab$dropoff_latitude > UL,"dropoff_latitude"] <- UL
# passenger_count
summary(Train_Cab$passenger_count)
Q1 <- quantile(Train_Cab$passenger_count,0.25)
Q3 <- quantile(Train_Cab$passenger_count,0.75)
UL <- round(Q3 + (1.5*IQR(Train_Cab$passenger_count))) # 4
LL <- round(Q1 - (1.5*IQR(Train_Cab$passenger_count))) #0
# practically maximum 6 passenger can travel in a cab
Train_Cab[Train_Cab$passenger_count < LL,"passenger_count"] <-LL
Train_Cab[Train_Cab$passenger_count > 6,"passenger_count"] <- UL
Train_Cab$passenger_count[Train_Cab$passenger_count < 1] <- NA
Train_Cab = na.omit(Train_Cab)
for (i in 1:length(cnames))
assign(paste0("gn",i), ggplot(aes_string(y = cnames[i]), data = Train_Cab)+
stat_boxplot(geom = "errorbar", width = 0.5) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +
theme(legend.position="bottom")+
labs(y=cnames[i])+
ggtitle(paste("Box plot for",cnames[i])))
{
assign(paste0("gn",i), ggplot(aes_string(y = cnames[i]), data = Train_Cab)+
stat_boxplot(geom = "errorbar", width = 0.5) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +
theme(legend.position="bottom")+
labs(y=cnames[i])+
ggtitle(paste("Box plot for",cnames[i])))
}
gridExtra::grid.arrange(gn1,gn2,gn3,gn4,gn5,gn6,ncol=2)
# Lets check dimensions of data after outlier removal
dim(Train_Cab)
library(purrr)
library(geosphere)
library(rlist)
get_geo_distance = function(long1, lat1, long2, lat2) {
loadNamespace("purrr")
loadNamespace("geosphere")
longlat1 = purrr::map2(long1, lat1, function(x,y) c(x,y))
longlat2 = purrr::map2(long2, lat2, function(x,y) c(x,y))
distance_list = purrr::map2(longlat1, longlat2, function(x,y) geosphere::distHaversine(x, y))
distance_m = list.extract(distance_list, position = 1)
#if (units == "km") {
distance = distance_m / 1000.0;
distance
}
{
Train_Cab$distance[i]= get_geo_distance(Train_Cab$pickup_longitude[i],Train_Cab$pickup_latitude[i],Train_Cab$dropoff_longitude[i],Train_Cab$dropoff_latitude[i])
}
install.packages("geosphere")
install.packages("rlist")
get_geo_distance = function(long1, lat1, long2, lat2) {
loadNamespace("purrr")
loadNamespace("geosphere")
longlat1 = purrr::map2(long1, lat1, function(x,y) c(x,y))
longlat2 = purrr::map2(long2, lat2, function(x,y) c(x,y))
distance_list = purrr::map2(longlat1, longlat2, function(x,y) geosphere::distHaversine(x, y))
distance_m = list.extract(distance_list, position = 1)
#if (units == "km") {
distance = distance_m / 1000.0;
distance
}
# Applying distance formula for train data
for(i in (1:nrow(Train_Cab)))
{
Train_Cab$distance[i]= get_geo_distance(Train_Cab$pickup_longitude[i],Train_Cab$pickup_latitude[i],Train_Cab$dropoff_longitude[i],Train_Cab$dropoff_latitude[i])
}
get_geo_distance = function(long1, lat1, long2, lat2) {
loadNamespace("purrr")
loadNamespace("geosphere")
longlat1 = purrr::map2(long1, lat1, function(x,y) c(x,y))
longlat2 = purrr::map2(long2, lat2, function(x,y) c(x,y))
distance_list = purrr::map2(longlat1, longlat2, function(x,y) geosphere::distHaversine(x, y))
distance_m = list.extract(distance_list, position = 1)
#if (units == "km") {
distance = distance_m / 1000.0;
distance
}
{
Train_Cab$distance[i]= get_geo_distance(Train_Cab$pickup_longitude[i],Train_Cab$pickup_latitude[i],Train_Cab$dropoff_longitude[i],Train_Cab$dropoff_latitude[i])
}
# Lets check data after distance variable creation
head(Train_Cab)
# Lets check whether distance variables has any outlier using boxplot
ggplot(aes_string(y = 'fare_amount', x = "distance"), data = subset(Train_Cab))+
stat_boxplot(geom = "errorbar", width = 0.25) +
geom_boxplot(outlier.colour="red", fill = "grey" ,outlier.shape=18,
outlier.size=1, notch=FALSE) +theme(legend.position="bottom")+
ggtitle(paste("Box plot of distnce variable with outliers"))
# Lets check summary of distance variable no outliers
summary(Train_Cab$distance)
Train_Cab$distance[Train_Cab$distance < 1] <- mean(Train_Cab$distance)
# The data left after all preprocessing
df = Train_Cab
dim(df)
head(Train_Cab)
# Lets check distribution of each numeric and categorical variables
names(Train_Cab)
# Lets save numeric varaibles
num_var <- c("fare_amount","pickup_longitude" ,"pickup_latitude", "dropoff_longitude",
"dropoff_latitude","passenger_count","distance")
# fare_amount
ggplot(Train_Cab, aes_string(x = Train_Cab$fare_amount)) +
geom_histogram(fill="skyblue", colour = "black") + geom_density() +
theme_bw() + xlab("Fare amount") + ylab("Frequency")+ggtitle("distribution of fare_amount")
# pickup_longitude
ggplot(Train_Cab, aes_string(x = Train_Cab$pickup_longitude)) +
geom_histogram(fill="skyblue", colour = "black",bins = 100,boundry =1) + geom_density() +
theme_bw() + xlab("pickup_longitude") + ylab("Frequency")+ggtitle("distribution of pickup_longitude")
# pickup_latitude
ggplot(Train_Cab, aes_string(x = Train_Cab$pickup_latitude)) +
geom_histogram(fill="skyblue", colour = "black",bins = 100) + geom_density() +
theme_bw() + xlab("pickup_latitude") + ylab("Frequency")+ggtitle("Frequency of pickup_latitude")
# dropoff_longitude
ggplot(Train_Cab, aes_string(x = Train_Cab$dropoff_longitude)) +
geom_histogram(fill="skyblue", colour = "black",bins = 100) + geom_density() +
theme_bw() + xlab("dropoff_longitude") + ylab("Frequency")+ggtitle("Frequency of dropoff_longitude")
# dropoff_latitude
ggplot(Train_Cab, aes_string(x = Train_Cab$dropoff_latitude)) +
geom_histogram(fill="skyblue", colour = "black",bins = 100) + geom_density() +
theme_bw() + xlab("dropoff_latitude") + ylab("Frequency")+ggtitle("Frequency of dropoff_latitude")
# passenger_count
ggplot(Train_Cab, aes_string(x = Train_Cab$passenger_count)) +
geom_histogram(fill="skyblue", colour = "black") + geom_density() +
theme_bw() + xlab("passenger_count") + ylab("Frequency")+ggtitle("distribution of passenger_count")
# distance
ggplot(Train_Cab, aes_string(x = Train_Cab$distance)) +
geom_histogram(fill="skyblue", colour = "black") + geom_density() +
theme_bw() + xlab("distance") + ylab("Frequency")+ggtitle(" distribution of distance ")
# Visualization between fare_amount and years.
ggplot(data = Train_Cab, aes(x = year,y = fare_amount))+
geom_bar(stat = "identity",color ="DarkSlateBlue")+
labs(title = "Fare Amount Vs. year", x = "years", y = "Fare")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(axis.text.x = element_text( color="black", size=6, angle=45))
# Visualization between fare_amount and months.
ggplot(Train_Cab, aes(x = month,y = fare_amount))+
geom_bar(stat = "identity",color = "DarkSlateBlue")+
labs(title = "Fare Amount Vs. Month", x = "Month", y = "Fare")+
theme(axis.text.x = element_text( color="navy blue", size=8))
# Visualization between fare_amount and weekday.
ggplot(data = Train_Cab, aes(x = day,y = fare_amount))+
geom_bar(stat = "identity",color = "DarkSlateBlue")+
labs(title = "Fare Amount Vs. weekday", x = "Days of the week", y = "Fare")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(axis.text.x = element_text( color="black", size=6, angle=45))
# Visualization between fare_amount and time.
ggplot(data = Train_Cab, aes(x = hour, y = fare_amount))+
geom_bar(stat = "identity",color = "DarkSlateBlue")+
labs(title = "Fare Amount Vs.hour", x = "hour", y = "Fare")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(axis.text.x = element_text( color="black", size=6, angle=45))
# Visualization between fare_amount and pickup_longitude.
ggplot(Train_Cab,aes(pickup_longitude,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w pickup_longitude and fare", x = "pickup_longitude", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Train_Cab,aes(pickup_latitude,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w pickup_latitude and fare", x = "pickup_latitude", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Train_Cab,aes(dropoff_longitude,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w dropoff_longitude and fare", x = "dropoff_longitude", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Train_Cab,aes(dropoff_latitude,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w dropoff_latitude and fare", x = "dropoff_latitude", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Train_Cab,aes(passenger_count,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w passengercount and fare", x = "passenger_count", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Train_Cab,aes(passenger_count,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w passengercount and fare", x = "passenger_count", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
ggplot(Train_Cab,aes(distance,fare_amount)) +
geom_point(alpha=0.5,color="DarkSlateBlue") +
labs(title = "Scatter Plot b/w distance and fare", x = "Distance", y = "Fare Amount")+
scale_color_gradientn(colors=c('blue','light blue','dark blue','light green','yellow','dark orange','black')) +
theme_bw()
# Feature selection ------------------------------------------------------
numeric_index <- sapply(Train_Cab,is.numeric)# Selecting only numeric
numeric_index
numeric_data <-Train_Cab[,numeric_index]
cnames <- colnames(numeric_data)
cnames
# Correlation Plot for to select significant continous variables
cor(Train_Cab[,numeric_index])
corrgram(Train_Cab[,numeric_index], order = F,
upper.panel=panel.pie, text.panel=panel.txt, main = "Correlation Plot")
# Anova Test is performed between cat_var (categorical independent variables) & fare_amount (continuous target variable)
str(Train_Cab)
names(Train_Cab)
cat_var <-c("date","year","month","day","hour")
# aov(Train_Cab$fare_amount~Train_Cab$year)
# for all categorical variables
for(i in cat_var){
print(i)
Anova_test_result = summary(aov(formula = fare_amount~Train_Cab[,i],Train_Cab))
print(Anova_test_result)
}
names(Train_Cab)
# From the anova result, we can observe Date and day
# has p value > 0.05, so delete this variable not consider in model.
# lets delete date and day variable
Train_Cab$day <- NULL
Train_Cab$date <- NULL
head(Train_Cab)
# Checking distance variable distribution using histogram
ggplot(Train_Cab, aes_string(x = Train_Cab$distance)) +
geom_histogram(fill="skyblue", colour = "black") + geom_density() +
theme_bw() + xlab("distance") + ylab("Frequency")+ggtitle(" distribution of distance ")
# Lets take log transformation to remove skewness
# Lets define function for log transformation of variables
signedlog10 = function(x) {
ifelse(abs(x) <= 1, 0, sign(x)*log10(abs(x)))
}
# Applying log function to distance variable
Train_Cab$distance = signedlog10(Train_Cab$distance)
# Checking distance distribution after applying function
ggplot(Train_Cab, aes_string(x = Train_Cab$distance)) +
geom_histogram(fill="skyblue", colour = "black") + geom_density() +
theme_bw() + xlab("distance") + ylab("Frequency")+ggtitle(" distribution of distance after log transformation")
head(Train_Cab)
# Model development -------------------------------------------------------
# Let's clean R Environment, as it uses RAM which is limited
library(DataCombine)
rmExcept("Train_Cab")
# Split the data set into train and test
set.seed(1234)
train.index = createDataPartition(Train_Cab$fare_amount, p = .80, list = FALSE)
train = Train_Cab[train.index,]
test  = Train_Cab[-train.index,]
# fit linear regression model
# we will use the lm() function in the stats package
linear_Reg_model <- lm(fare_amount ~.,data = train)
summary(linear_Reg_model)
# Lets check the assumptins of ols regression
#Error should follow normal distribution and no hetroscadacity
# assumptions are checked usig residual plot and normal qq plot
# Change the panel layout to 2 x 2
par(mfrow = c(2, 2))
plot(linear_Reg_model)
#vif check model
library(car)
vif(linear_Reg_model) # all vif values are less than 5 there is no multicolinearity among  the IV
# No autocorrelation between errors
dwt(linear_Reg_model) # dwt < 2 so there is no autocorrelation in error
# predicting for test data
predictions_LR <- predict(linear_Reg_model,test[,-1])
# For tes data
print(postResample(pred = predictions_LR, obs =test$fare_amount))
MAPE = function(y, yhat){
mean(abs((y - yhat)/y))
}
MAPE(test[,1],predictions_LR) #0.37
MAPE(test[,1],predictions_LR) #0.37
# Desicision Tree ---------------------------------------------------------
library(rpart)  			        # Popular decision tree algorithm
library(rattle)					      # Fancy tree plot
library(rpart.plot)				    # Enhanced tree plots
library(RColorBrewer)				  # Color selection for fancy tree plot
fit <- rpart(fare_amount ~.,data = train,method = 'anova')
fit
rpart.plot(fit,type=4,digits=3,fallen.leaves=T,tweak = 1.5)
predictions_DTR <- predict(fit,test[,-1])
print(postResample(pred = predictions_DTR , obs =test$fare_amount))
MAPE(test[,1],predictions_DTR) #0.24
RF_model = randomForest(fare_amount ~.,data = train, importance = TRUE, ntree = 200)
RF_Predictions = predict(RF_model, test[,-1])
print(postResample(pred = RF_Predictions , obs =test$fare_amount))
MAPE(test[,1],RF_Predictions)#0.2047504
LinearRegression  = c(RMSE =3.96 ,Rsquared =0.54 ,MAE =2.73 ,MAPE =0.37 )
DecisionTree = c(RMSE =3.13  ,Rsqared =0.67 ,MAE =2.16 ,MAPE =0.24 )
RandomForest = c(RMSE =2.59  ,Rsquared =0.77 ,MAE =1.71 ,MAPE = 0.20)
Final_Results_in_R <- cbind(LinearRegression,DecisionTree,RandomForest)
Final_Results_in_R
t(Final_Results_in_R)
install.packages(c("usdm", "VIM"))
